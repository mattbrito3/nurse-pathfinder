// Deno Edge Function - Verify Reset Token
// Esta fun√ß√£o valida o token de reset de senha e processa a mudan√ßa

import { serve } from "https://deno.land/std@0.208.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};

interface ResetPasswordRequest {
  token: string;
  newPassword: string;
}

interface ResetPasswordResponse {
  success: boolean;
  message: string;
  email?: string;
  error?: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders
    });
  }

  try {
    console.log('üîÑ Starting password reset token verification...');
    
    // Parse request body
    const body: ResetPasswordRequest = await req.json();
    const { token, newPassword } = body;
    
    if (!token) {
      console.error('‚ùå Token n√£o fornecido');
      return new Response(JSON.stringify({
        success: false,
        message: 'Token de reset n√£o fornecido'
      } as ResetPasswordResponse), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (!newPassword) {
      console.error('‚ùå Nova senha n√£o fornecida');
      return new Response(JSON.stringify({
        success: false,
        message: 'Nova senha √© obrigat√≥ria'
      } as ResetPasswordResponse), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Verificar se √© apenas valida√ß√£o ou processamento real
    const isValidationOnly = newPassword === 'temp_validation_only';
    
    // Validar for√ßa da senha apenas se n√£o for valida√ß√£o
    if (!isValidationOnly && newPassword.length < 8) {
      return new Response(JSON.stringify({
        success: false,
        message: 'A senha deve ter pelo menos 8 caracteres'
      } as ResetPasswordResponse), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log(`üîç Verificando token: ${token.substring(0, 8)}...`);

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    
    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
      return new Response(JSON.stringify({
        success: false,
        message: 'Erro de configura√ß√£o do servidor'
      } as ResetPasswordResponse), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Validar token usando a fun√ß√£o do banco
    const { data: validationData, error: validationError } = await supabase
      .rpc('validate_reset_token', { p_token: token });

    if (validationError) {
      console.error('‚ùå Erro ao validar token:', validationError);
      return new Response(JSON.stringify({
        success: false,
        message: 'Erro interno ao validar token'
      } as ResetPasswordResponse), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (!validationData || validationData.length === 0) {
      console.error('‚ùå Token inv√°lido');
      return new Response(JSON.stringify({
        success: false,
        message: 'Token de reset inv√°lido'
      } as ResetPasswordResponse), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    const validation = validationData[0];
    
    if (!validation.valid) {
      console.error('‚ùå Token inv√°lido:', validation.message);
      return new Response(JSON.stringify({
        success: false,
        message: validation.message
      } as ResetPasswordResponse), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log('‚úÖ Token v√°lido para:', validation.email);

    // Buscar usu√°rio pelo email
    const { data: users, error: userError } = await supabase.auth.admin.listUsers();
    
    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', userError);
      return new Response(JSON.stringify({
        success: false,
        message: 'Erro interno do servidor'
      } as ResetPasswordResponse), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    const user = users.users.find(u => u.email?.toLowerCase() === validation.email.toLowerCase());

    if (!user) {
      console.error('‚ùå Usu√°rio n√£o encontrado:', validation.email);
      return new Response(JSON.stringify({
        success: false,
        message: 'Usu√°rio n√£o encontrado'
      } as ResetPasswordResponse), {
        status: 404,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (isValidationOnly) {
      // Apenas valida√ß√£o, n√£o processar senha
      console.log('‚úÖ Token v√°lido para valida√ß√£o');
      
      return new Response(JSON.stringify({
        success: true,
        message: 'Token v√°lido',
        email: validation.email
      } as ResetPasswordResponse), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log('üë§ Usu√°rio encontrado, atualizando senha...');

    // Atualizar senha do usu√°rio
    const { error: updateError } = await supabase.auth.admin.updateUserById(user.id, {
      password: newPassword
    });

    if (updateError) {
      console.error('‚ùå Erro ao atualizar senha:', updateError);
      return new Response(JSON.stringify({
        success: false,
        message: updateError.message || 'Erro ao atualizar senha'
      } as ResetPasswordResponse), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Marcar token como usado
    const { error: markError } = await supabase
      .rpc('mark_reset_token_used', { p_token: token });

    if (markError) {
      console.error('‚ùå Erro ao marcar token como usado:', markError);
      // N√£o falhar aqui, a senha j√° foi atualizada
    }

    console.log('‚úÖ Senha atualizada com sucesso');

    return new Response(JSON.stringify({
      success: true,
      message: 'Senha atualizada com sucesso!',
      email: validation.email
    } as ResetPasswordResponse), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('‚ùå Error in verify-reset-token:', error);
    return new Response(JSON.stringify({
      success: false,
      message: 'Erro interno do servidor',
      error: error.message
    } as ResetPasswordResponse), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
}); 